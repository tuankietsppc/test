import streamlit as st  # type: ignore
import pandas as pd  # type: ignore
import plotly.express as px  # type: ignore
import numpy as np  # type: ignore
import io
import os
from fpdf import FPDF # type: ignore
import plotly.io as pio  # type: ignore
import tempfile
from streamlit_chat import message  # type: ignore # Chat UI
from PIL import Image # type: ignore
import urllib.request
import base64
# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† b·ªë c·ª•c trang
# ƒê·∫∑t ti√™u ƒë·ªÅ trang v√† ch·∫ø ƒë·ªô b·ªë c·ª•c r·ªông
st.set_page_config(page_title='Ph√¢n t√≠ch ƒëi·ªÉm thi', layout="wide")
st.title('üìä PH√ÇN T√çCH D·ªÆ LI·ªÜU ƒêI·ªÇM THI')  # Hi·ªÉn th·ªã ti√™u ƒë·ªÅ l·ªõn tr√™n giao di·ªán

# === √ÅP D·ª§NG CSS T√ôY CH·ªàNH CHO GIAO DI·ªÜN ===
st.markdown("""
<style>
/* T√πy ch·ªânh n√∫t ch√≠nh */
div.stButton > button, .stDownloadButton button {
    background-color: #0072C6;  /* m√†u n·ªÅn n√∫t */
    color: white;               /* m√†u ch·ªØ */
    font-weight: bold;          /* ch·ªØ ƒë·∫≠m */
    border-radius: 8px;         /* bo g√≥c n√∫t */
    padding: 10px 25px;         /* kho·∫£ng c√°ch trong n√∫t */
    border: none;               /* kh√¥ng vi·ªÅn */
    transition: 0.3s ease-in-out; /* hi·ªáu ·ª©ng chuy·ªÉn ƒë·ªïi */
    margin-top: 10px;           /* kho·∫£ng c√°ch tr√™n n√∫t */
}
div.stButton > button:hover, .stDownloadButton button:hover {
    background-color: #005A9E;  /* ƒë·ªïi m√†u khi hover */
    transform: scale(1.03);     /* ph√≥ng to nh·∫π */
}

/* Giao di·ªán sidebar */
section[data-testid="stSidebar"] {
    background-color: #F0F5FA;  /* m√†u n·ªÅn sidebar */
    border-right: 2px solid #C7D0E4; /* vi·ªÅn ph·∫£i */
}
section[data-testid="stSidebar"] h2 {
    color: #0072C6;             /* m√†u ch·ªØ ti√™u ƒë·ªÅ sidebar */
    font-size: 1.3rem;          /* c·ª° ch·ªØ ti√™u ƒë·ªÅ sidebar */
}

/* T√πy ch·ªânh h·ªôp ch·ªçn */
div[data-baseweb="select"], div[data-baseweb="radio"], div[data-baseweb="checkbox"] {
    background-color: #ffffff;  /* n·ªÅn tr·∫Øng */
    border: 1px solid #0072C6; /* vi·ªÅn m√†u xanh */
    border-radius: 6px;         /* bo g√≥c */
    padding: 10px;              /* kho·∫£ng c√°ch trong h·ªôp */
    margin-bottom: 12px;        /* kho·∫£ng c√°ch d∆∞·ªõi h·ªôp */
}

/* Khung n·ªôi dung */
.khung_noi_dung {
    background-color: #ffffff;  /* n·ªÅn tr·∫Øng */
    border-radius: 12px;        /* bo g√≥c */
    padding: 25px;              /* kho·∫£ng c√°ch trong */
    margin-bottom: 30px;        /* kho·∫£ng c√°ch d∆∞·ªõi */
    box-shadow: 0px 2px 8px rgba(0, 114, 198, 0.1); /* ƒë·ªï b√≥ng */
}
.tieu_de_khung {
    font-size: 22px;            /* c·ª° ch·ªØ ti√™u ƒë·ªÅ khung */
    font-weight: 600;           /* ch·ªØ ƒë·∫≠m v·ª´a ph·∫£i */
    color: #0072C6;             /* m√†u ch·ªØ */
    margin-bottom: 15px;        /* kho·∫£ng c√°ch d∆∞·ªõi */
}
</style>
""", unsafe_allow_html=True)  # Ch√®n CSS t√πy ch·ªânh v√†o Streamlit
# Hi·ªÉn th·ªã uploader ·ªü ƒë√¢y
# T·∫£i file
uploaded_file = st.file_uploader("Ch·ªçn t·ªáp Excel (.xlsx ho·∫∑c .xls)", type=["xlsx", "xls"])

# D√πng session_state ƒë·ªÉ gi·ªØ tr·∫°ng th√°i
if "data_loaded" not in st.session_state:
    st.session_state.data_loaded = False
if "du_lieu" not in st.session_state:
    st.session_state.du_lieu = None

# Hi·ªÉn th·ªã n√∫t x√°c nh·∫≠n sau khi ch·ªçn file
if uploaded_file:
    st.success("‚úÖ ƒê√£ ch·ªçn file: " + uploaded_file.name)
    try:
        df = pd.read_excel(uploaded_file)

        # ƒê·ªïi t√™n c·ªôt n·∫øu c√≥
        df = df.rename(columns={
            "TRUONG": "Tr∆∞·ªùng THCS",
            "LOP": "T√™n l·ªõp",
            "GT": "GT",
            "DT": "D√¢n t·ªôc"
        })

        st.session_state.du_lieu = df
        st.session_state.data_loaded = True
        st.success("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")

    except Exception as e:
        st.error(f"L·ªói khi ƒë·ªçc file: {e}")


    # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt t·ªìn t·∫°i
    required_columns = ["Tr∆∞·ªùng THCS", "T√™n l·ªõp"]
    if all(col in df.columns for col in required_columns):
        if st.session_state.data_loaded:
            du_lieu = st.session_state.du_lieu.copy()
        st.sidebar.markdown("### üéØ B·ªô l·ªçc d·ªØ li·ªáu")
        st.sidebar.markdown("L·ªçc d·ªØ li·ªáu theo tr∆∞·ªùng, l·ªõp, gi·ªõi t√≠nh, d√¢n t·ªôc v√† kho·∫£ng ƒëi·ªÉm ƒë·ªÉ ph√¢n t√≠ch.")
        # --- L·ªçc theo Tr∆∞·ªùng THCS ---
        truongs = du_lieu["Tr∆∞·ªùng THCS"].dropna().unique().tolist()
        truongs.insert(0, "T·∫•t c·∫£")
        truong_chon = st.sidebar.multiselect("Ch·ªçn Tr∆∞·ªùng THCS", truongs, default=["T·∫•t c·∫£"])

        # N·∫øu ch·ªçn "T·∫•t c·∫£", b·ªè ch·ªçn c√°c tr∆∞·ªùng kh√°c
        if "T·∫•t c·∫£" in truong_chon:
            truong_chon = [truong for truong in truong_chon if truong == "T·∫•t c·∫£"]

        # C·∫£nh b√°o n·∫øu kh√¥ng ch·ªçn g√¨
        if not truong_chon:
            st.sidebar.warning("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt tr∆∞·ªùng THCS.")
            st.stop()

        # L·ªçc d·ªØ li·ªáu n·∫øu kh√¥ng ch·ªçn "T·∫•t c·∫£"
        if "T·∫•t c·∫£" not in truong_chon:
            du_lieu = du_lieu[du_lieu["Tr∆∞·ªùng THCS"].isin(truong_chon)]



        # --- L·ªçc theo T√™n l·ªõp ---
        lop_list = du_lieu["T√™n l·ªõp"].dropna().unique().tolist()
        lop_list.insert(0, "T·∫•t c·∫£")
        lop_chon = st.sidebar.selectbox("Ch·ªçn T√™n l·ªõp", lop_list)
        if lop_chon != "T·∫•t c·∫£":
            du_lieu = du_lieu[du_lieu["T√™n l·ªõp"] == lop_chon]

        # --- L·ªçc theo Gi·ªõi t√≠nh (GT) ---
        if "GT" in du_lieu.columns:
            gt_list = du_lieu["GT"].dropna().unique().tolist()
            gt_list.insert(0, "T·∫•t c·∫£")
            gt_chon = st.sidebar.selectbox("Ch·ªçn Gi·ªõi t√≠nh", gt_list)
            if gt_chon != "T·∫•t c·∫£":
                du_lieu = du_lieu[du_lieu["GT"] == gt_chon]

        # --- L·ªçc theo D√¢n t·ªôc ---
        if "D√¢n t·ªôc" in du_lieu.columns:
            dt_list = du_lieu["D√¢n t·ªôc"].dropna().unique().tolist()
            dt_list.insert(0, "T·∫•t c·∫£")
            dt_chon = st.sidebar.selectbox("Ch·ªçn D√¢n t·ªôc", dt_list)
            if dt_chon != "T·∫•t c·∫£":
                du_lieu = du_lieu[du_lieu["D√¢n t·ªôc"] == dt_chon]

        # Hi·ªÉn th·ªã d·ªØ li·ªáu ƒë√£ l·ªçc
        st.markdown('<div class="tieu_de_khung">üìÑ D·ªØ li·ªáu sau khi l·ªçc c√°c tr∆∞·ªùng th√¥ng tin:</div>', unsafe_allow_html=True)
        st.dataframe(du_lieu)
        
        # Hi·ªÉn th·ªã s·ªë d√≤ng d·ªØ li·ªáu sau l·ªçc
        so_dong = du_lieu.shape[0]
        st.write(f"‚úÖ S·ªë d√≤ng d·ªØ li·ªáu sau khi l·ªçc ƒë∆°n v·ªã: {so_dong}")

    else:
        st.warning("‚ö†Ô∏è File Excel c·∫ßn c√≥ √≠t nh·∫•t 2 c·ªôt: 'TRUONG' v√† 'LOP'")

    if all(col in du_lieu.columns for col in ["To√°n(l·ªõp 9)", "To√°n(KC)", "Ng·ªØ vƒÉn(l·ªõp 9)", "Ng·ªØ vƒÉn(KC)"]):

        mon_chon = st.sidebar.selectbox("üìò Ch·ªçn m√¥n c·∫ßn ph√¢n t√≠ch", ["To√°n", "VƒÉn"])

        # L·∫•y t√™n c·ªôt t∆∞∆°ng ·ª©ng v·ªõi m√¥n ch·ªçn
        if mon_chon == "To√°n":
            cot_lop9 = "To√°n(l·ªõp 9)"
            cot_kc = "To√°n(KC)"
        else:
            cot_lop9 = "Ng·ªØ vƒÉn(l·ªõp 9)"
            cot_kc = "Ng·ªØ vƒÉn(KC)"

        # Chuy·ªÉn d·ªØ li·ªáu sang ki·ªÉu s·ªë, l·ªói s·∫Ω th√†nh NaN
        du_lieu[cot_lop9] = pd.to_numeric(du_lieu[cot_lop9], errors='coerce')
        du_lieu[cot_kc] = pd.to_numeric(du_lieu[cot_kc], errors='coerce')

        avg_lop9 = du_lieu[cot_lop9].mean()
        avg_kc = du_lieu[cot_kc].mean()
        # --- B·ªô l·ªçc kho·∫£ng ƒëi·ªÉm (√°p d·ª•ng cho c·∫£ c·ªôt l·ªõp 9 v√† c·ªôt KC) ---
        ds_khoang_diem = ["T·∫•t c·∫£", "0 ƒë·∫øn 2", "Tr√™n 2 ƒë·∫øn 5", "Tr√™n 5 ƒë·∫øn 8", "Tr√™n 8 ƒë·∫øn 10", "V·∫Øng"]

        # multiselect v·ªõi l·ª±a ch·ªçn m·∫∑c ƒë·ªãnh l√† t·∫•t c·∫£
        khoang_diem_chon = st.sidebar.multiselect(
            "üéØ Ch·ªçn kho·∫£ng ƒëi·ªÉm (√°p d·ª•ng cho l·ªõp 9 v√† KC)",
            options=ds_khoang_diem,
            default=ds_khoang_diem  # M·∫∑c ƒë·ªãnh ch·ªçn t·∫•t c·∫£
        )

        # N·∫øu ch·ªçn "T·∫•t c·∫£", t·ª± ƒë·ªông coi nh∆∞ ch·ªçn h·∫øt (tr·ª´ "T·∫•t c·∫£" ch√≠nh n√≥)
        if "T·∫•t c·∫£" in khoang_diem_chon:
            khoang_diem_chon = [k for k in ds_khoang_diem if k != "T·∫•t c·∫£"]

        # N·∫øu kh√¥ng ch·ªçn g√¨, hi·ªÉn th·ªã c·∫£nh b√°o v√† d·ª´ng
        if not khoang_diem_chon:
            st.sidebar.warning("‚ö†Ô∏è B·∫°n ph·∫£i ch·ªçn √≠t nh·∫•t m·ªôt kho·∫£ng ƒëi·ªÉm.")
            st.stop()


        # H√†m ki·ªÉm tra "v·∫Øng" (gi·∫£ s·ª≠ d·ªØ li·ªáu v·∫Øng th·ªÉ hi·ªán d∆∞·ªõi d·∫°ng NaN ho·∫∑c chu·ªói 'v·∫Øng', 'V·∫Øng')
        def is_vang(x):
            if pd.isna(x):
                return True
            if isinstance(x, str) and x.strip().lower() == "v·∫Øng":
                return True
            return False

        # N·∫øu kh√¥ng ch·ªçn g√¨, kh√¥ng hi·ªÉn th·ªã d·ªØ li·ªáu
        if not khoang_diem_chon:
            du_lieu = du_lieu[[]]  # Tr·∫£ v·ªÅ dataframe r·ªóng
        else:
            def thuoc_khoang(diem, danh_sach_khoang):
                if pd.isna(diem):
                    return "V·∫Øng" in danh_sach_khoang
                if 0 <= diem <= 2:
                    return "0 ƒë·∫øn 2" in danh_sach_khoang
                elif 2 < diem <= 5:
                    return "Tr√™n 2 ƒë·∫øn 5" in danh_sach_khoang
                elif 5 < diem <= 8:
                    return "Tr√™n 5 ƒë·∫øn 8" in danh_sach_khoang
                elif 8 < diem <= 10:
                    return "Tr√™n 8 ƒë·∫øn 10" in danh_sach_khoang
                return False

            du_lieu = du_lieu[
                du_lieu[cot_lop9].apply(lambda x: thuoc_khoang(x, khoang_diem_chon)) |
                du_lieu[cot_kc].apply(lambda x: thuoc_khoang(x, khoang_diem_chon))
            ]



        df_so_sanh = pd.DataFrame({
            "Lo·∫°i": [f"{mon_chon} (l·ªõp 9)", f"{mon_chon} (KC)"],
            "ƒêi·ªÉm trung b√¨nh": [avg_lop9, avg_kc]
        })
        fig = px.bar(
            df_so_sanh,
            x="Lo·∫°i",
            y="ƒêi·ªÉm trung b√¨nh",
            title=f"üìä So s√°nh ƒëi·ªÉm trung b√¨nh m√¥n {mon_chon} nƒÉm l·ªõp 9 v√† {mon_chon} ƒëi·ªÉm thi",
            text="ƒêi·ªÉm trung b√¨nh",
            color="Lo·∫°i",
            color_discrete_sequence=["#1f77b4", "#ff7f0e"],
            template="plotly_white"
        )
        
        fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
        st.plotly_chart(fig, use_container_width=True)
        
        # T·∫°o c·ªôt ph√¢n lo·∫°i kho·∫£ng ƒëi·ªÉm cho t·ª´ng ngu·ªìn ƒëi·ªÉm
        def classify_range(diem):
            if pd.isna(diem):
                return "V·∫Øng"
            elif 0 <= diem <= 2:
                return "0 ƒë·∫øn 2"
            elif 2 < diem <= 5:
                return "Tr√™n 2 ƒë·∫øn 5"
            elif 5 < diem <= 8:
                return "Tr√™n 5 ƒë·∫øn 8"
            elif 8 < diem <= 10:
                return "Tr√™n 8 ƒë·∫øn 10"
            else:
                return "Kh√°c"

        # Ph√¢n lo·∫°i ƒëi·ªÉm theo kho·∫£ng
        du_lieu["Kho·∫£ng ƒëi·ªÉm l·ªõp 9"] = du_lieu[cot_lop9].apply(classify_range)
        du_lieu["Kho·∫£ng ƒëi·ªÉm KC"] = du_lieu[cot_kc].apply(classify_range)

        # L·ªçc d·ªØ li·ªáu theo tr∆∞·ªùng ƒë√£ ch·ªçn (n·∫øu c√≥ l·ªçc tr∆∞·ªùng)
        if "Tr∆∞·ªùng THCS" in du_lieu.columns:
            if truong_chon and "T·∫•t c·∫£" not in truong_chon:
                du_lieu_filtered = du_lieu[du_lieu["Tr∆∞·ªùng THCS"].isin(truong_chon)]
            else:
                du_lieu_filtered = du_lieu.copy()
        else:
            du_lieu_filtered = du_lieu.copy()

        # L·ªçc theo kho·∫£ng ƒëi·ªÉm ƒë√£ ch·ªçn
        def is_in_selected_range(x):
            return x in khoang_diem_chon

        du_lieu_filtered = du_lieu_filtered[
            du_lieu_filtered["Kho·∫£ng ƒëi·ªÉm l·ªõp 9"].apply(is_in_selected_range) |
            du_lieu_filtered["Kho·∫£ng ƒëi·ªÉm KC"].apply(is_in_selected_range)
        ]
        # Hi·ªÉn th·ªã d·ªØ li·ªáu sau khi l·ªçc theo kho·∫£ng ƒëi·ªÉm
        st.markdown('<div class="tieu_de_khung">üìÑ D·ªØ li·ªáu sau khi l·ªçc theo kho·∫£ng ƒëi·ªÉm:</div>', unsafe_allow_html=True)
        st.dataframe(du_lieu_filtered)

        # Hi·ªÉn th·ªã s·ªë d√≤ng d·ªØ li·ªáu
        st.write(f"üìå S·ªë d√≤ng d·ªØ li·ªáu sau khi l·ªçc kho·∫£ng ƒëi·ªÉm: {du_lieu_filtered.shape[0]}")

        # T·∫°o b·∫£ng t·∫ßn su·∫•t d·ª±a tr√™n d·ªØ li·ªáu ƒë√£ l·ªçc v√† ch·ªâ l·∫•y kho·∫£ng ƒëi·ªÉm ƒë∆∞·ª£c ch·ªçn
        if khoang_diem_chon:
            pie_lop9 = du_lieu_filtered["Kho·∫£ng ƒëi·ªÉm l·ªõp 9"].value_counts().reindex(
                khoang_diem_chon, fill_value=0
            ).reset_index()
            pie_lop9.columns = ["Kho·∫£ng ƒëi·ªÉm", "S·ªë l∆∞·ª£ng"]

            pie_kc = du_lieu_filtered["Kho·∫£ng ƒëi·ªÉm KC"].value_counts().reindex(
                khoang_diem_chon, fill_value=0
            ).reset_index()
            pie_kc.columns = ["Kho·∫£ng ƒëi·ªÉm", "S·ªë l∆∞·ª£ng"]

            # T·∫°o 2 c·ªôt ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·∫°nh nhau
            col1, col2 = st.columns(2)

            with col1:
                fig_pie1 = px.pie(
                    pie_lop9,
                    names="Kho·∫£ng ƒëi·ªÉm",
                    values="S·ªë l∆∞·ª£ng",
                    title=f"üéØ Ph√¢n b·ªë ƒëi·ªÉm {mon_chon} l·ªõp 9",
                    color_discrete_sequence=px.colors.qualitative.Pastel
                )
                fig_pie1.update_traces(textinfo='percent+label')
                st.plotly_chart(fig_pie1, use_container_width=True, key="pie_lop9")

            with col2:
                fig_pie2 = px.pie(
                    pie_kc,
                    names="Kho·∫£ng ƒëi·ªÉm",
                    values="S·ªë l∆∞·ª£ng",
                    title=f"üéØ Ph√¢n b·ªë ƒëi·ªÉm {mon_chon} KC",
                    color_discrete_sequence=px.colors.sequential.Viridis
                )
                fig_pie2.update_traces(textinfo='percent+label')
                st.plotly_chart(fig_pie2, use_container_width=True, key="pie_chart_kc")

            # ==== B·∫¢NG TH·ªêNG K√ä S·ªê L∆Ø·ª¢NG THEO KHO·∫¢NG ƒêI·ªÇM ====
            with st.container():
                st.markdown('<div class="khung_noi_dung">', unsafe_allow_html=True)
                st.markdown('<div class="tieu_de_khung">üìã B·∫£ng th·ªëng k√™ s·ªë l∆∞·ª£ng h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm</div>', unsafe_allow_html=True)

                # G·ªôp d·ªØ li·ªáu t·ª´ hai b·∫£ng t·∫ßn su·∫•t th√†nh m·ªôt b·∫£ng
                bang_thong_ke = pd.DataFrame({
                    "Kho·∫£ng ƒëi·ªÉm": pie_lop9["Kho·∫£ng ƒëi·ªÉm"],
                    f"{mon_chon} l·ªõp 9": pie_lop9["S·ªë l∆∞·ª£ng"],
                    f"{mon_chon} KC": pie_kc["S·ªë l∆∞·ª£ng"]
                })

                # CƒÉn gi·ªØa vƒÉn b·∫£n trong b·∫£ng
                styled_bang = bang_thong_ke.style.set_properties(**{
                    'text-align': 'center'
                })

                st.dataframe(styled_bang, use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
        else:
            st.info("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt kho·∫£ng ƒëi·ªÉm ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì v√† b·∫£ng th·ªëng k√™.")

    # ==== BI·ªÇU ƒê·ªí ƒê∆Ø·ªúNG SO S√ÅNH KHO·∫¢NG ƒêI·ªÇM GI·ªÆA C√ÅC TR∆Ø·ªúNG ====
    st.markdown('<div class="khung_noi_dung">', unsafe_allow_html=True)
    st.markdown('<div class="tieu_de_khung">üìà So s√°nh ph√¢n b·ªë ƒëi·ªÉm theo tr∆∞·ªùng (bi·ªÉu ƒë·ªì ƒë∆∞·ªùng)</div>', unsafe_allow_html=True)

    # L·ªçc c√°c kho·∫£ng ƒëi·ªÉm c·∫ßn thi·∫øt (kh√¥ng bao g·ªìm NaN/Kh√°c)
    khoang_diem_order = ["0 ƒë·∫øn 2", "Tr√™n 2 ƒë·∫øn 5", "Tr√™n 5 ƒë·∫øn 8", "Tr√™n 8 ƒë·∫øn 10", "V·∫Øng"]

    # Gom nh√≥m v√† ƒë·∫øm s·ªë l∆∞·ª£ng theo t·ª´ng kho·∫£ng ƒëi·ªÉm v√† tr∆∞·ªùng
    df_line = du_lieu[du_lieu["Kho·∫£ng ƒëi·ªÉm KC"].isin(khoang_diem_chon)] \
    .groupby(["Tr∆∞·ªùng THCS", "Kho·∫£ng ƒëi·ªÉm KC"]).size().reset_index(name="S·ªë l∆∞·ª£ng")
    df_line["Kho·∫£ng ƒëi·ªÉm KC"] = pd.Categorical(df_line["Kho·∫£ng ƒëi·ªÉm KC"], categories=khoang_diem_order, ordered=True)

    # S·∫Øp x·∫øp kho·∫£ng ƒëi·ªÉm theo th·ª© t·ª± logic
    df_line["Kho·∫£ng ƒëi·ªÉm KC"] = pd.Categorical(df_line["Kho·∫£ng ƒëi·ªÉm KC"], categories=khoang_diem_order, ordered=True)

    # T·∫°o bi·ªÉu ƒë·ªì ƒë∆∞·ªùng
    fig_line = px.line(
        df_line,
        x="Kho·∫£ng ƒëi·ªÉm KC",
        y="S·ªë l∆∞·ª£ng",
        color="Tr∆∞·ªùng THCS",
        markers=True,
        title="üìâ So s√°nh ph√¢n b·ªë ƒëi·ªÉm KC gi·ªØa c√°c tr∆∞·ªùng",
        line_shape="spline",
        template="plotly_white"
    )
    fig_line.update_traces(mode="lines+markers")
    st.plotly_chart(fig_line, use_container_width=True)

    st.markdown('</div>', unsafe_allow_html=True)
    # === BI·ªÇU ƒê·ªí C·ªòT PH√ÇN B·ªê KHO·∫¢NG ƒêI·ªÇM THEO TR∆Ø·ªúNG ===
    st.markdown('<div class="khung_noi_dung">', unsafe_allow_html=True)
    st.markdown('<div class="tieu_de_khung">üè´ Ph√¢n b·ªë h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm KC c·ªßa t·ª´ng tr∆∞·ªùng</div>', unsafe_allow_html=True)

    # T√≠nh to√°n s·ªë l∆∞·ª£ng h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm KC v√† tr∆∞·ªùng
    df_bar = du_lieu[du_lieu["Kho·∫£ng ƒëi·ªÉm KC"].isin(khoang_diem_chon)] \
    .groupby(["Kho·∫£ng ƒëi·ªÉm KC", "Tr∆∞·ªùng THCS"]).size().reset_index(name="S·ªë l∆∞·ª£ng")
    df_bar["Kho·∫£ng ƒëi·ªÉm KC"] = pd.Categorical(df_bar["Kho·∫£ng ƒëi·ªÉm KC"], categories=khoang_diem_order, ordered=True)

    df_bar["Kho·∫£ng ƒëi·ªÉm KC"] = pd.Categorical(df_bar["Kho·∫£ng ƒëi·ªÉm KC"], categories=khoang_diem_order, ordered=True)

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt nh√≥m
    fig_bar = px.bar(
        df_bar,
        x="Kho·∫£ng ƒëi·ªÉm KC",
        y="S·ªë l∆∞·ª£ng",
        color="Tr∆∞·ªùng THCS",
        barmode="group",
        title="üìä Ph√¢n b·ªë h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm KC c·ªßa t·ª´ng tr∆∞·ªùng",
        template="plotly_white"
    )
    # L∆∞u bi·ªÉu ƒë·ªì v√†o file t·∫°m (d√†nh cho PDF)
    with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp_bar:
        fig_bar.write_image(tmp_bar.name, width=700, height=400)
        path_bar_chart = tmp_bar.name  # L∆∞u l·∫°i ƒë∆∞·ªùng d·∫´n ƒë·ªÉ ch√®n v√†o PDF

        st.plotly_chart(fig_bar, use_container_width=True)
        st.markdown('</div>', unsafe_allow_html=True)

    # H√†m t·∫£i font Unicode n·∫øu ch∆∞a c√≥
    
    def ensure_unicode_font():
        base_url = "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/"
        fonts = [
            "DejaVuSans.ttf",
            "DejaVuSans-Bold.ttf",
        ]
        for filename in fonts:
            if not os.path.exists(filename):
                print(f"Downloading {filename}...")
                urllib.request.urlretrieve(base_url + filename, filename)
            else:
                print(f"{filename} already exists, skipping download.")

    ensure_unicode_font()



    class PDF(FPDF):
        def __init__(self):
            super().__init__()
            self.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
            self.add_font("DejaVu", "B", "DejaVuSans-Bold.ttf", uni=True)
            self.set_font("DejaVu", "", 12)

        def footer(self):
            self.set_y(-15)
            self.set_font("DejaVu", "B", 10)
            self.set_text_color(128)
            self.cell(0, 10, f"Trang {self.page_no()}", align="C")

    # ...

    if st.button("üì• T·∫°o b√°o c√°o PDF"):
        ensure_unicode_font()
        pdf = PDF()
        pdf.add_page()

        pdf.set_font("DejaVu", "B", 18)
        pdf.cell(0, 15, f"B√ÅO C√ÅO PH√ÇN T√çCH M√îN {mon_chon.upper()}", ln=True, align="C")
        pdf.set_font("DejaVu", "", 12)
        pdf.ln(10)

        page_width = 210
        table_width = 70 + 50  # t·ªïng chi·ªÅu r·ªông b·∫£ng

        # t√≠nh x ƒë·ªÉ cƒÉn gi·ªØa
        x = (page_width - table_width) / 2

        pdf.set_x(x)  # ƒë·∫∑t v·ªã tr√≠ x cho ti√™u ƒë·ªÅ b·∫£ng
        pdf.set_font("DejaVu", "B", 12)
        pdf.set_fill_color(230, 230, 230)

        pdf.cell(70, 10, "Lo·∫°i ƒëi·ªÉm", border=1, align="C", fill=True)
        pdf.cell(50, 10, "ƒêi·ªÉm trung b√¨nh", border=1, align="C", fill=True)
        pdf.ln()

        pdf.set_x(x)  # ƒë·∫∑t l·∫°i x cho d√≤ng ti·∫øp theo
        pdf.set_font("DejaVu", "", 12)
        pdf.cell(70, 10, "ƒêi·ªÉm trung b√¨nh l·ªõp 9", border=1, align="L")
        pdf.cell(50, 10, f"{avg_lop9:.2f}", border=1, align="C")
        pdf.ln()

        pdf.set_x(x)
        pdf.cell(70, 10, "ƒêi·ªÉm trung b√¨nh KC", border=1, align="L")
        pdf.cell(50, 10, f"{avg_kc:.2f}", border=1, align="C")
        pdf.ln(15)

        fig.update_layout(
            margin=dict(t=80, b=40, l=40, r=40)  # ƒë·ªß kh√¥ng gian cho ch·ªØ, ti√™u ƒë·ªÅ
        )

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmpfile:
            fig.write_image(tmpfile.name, width=900, height=500, scale=3)  # scale cao ƒë·ªÉ ·∫£nh s·∫Øc n√©t
            pdf.image(tmpfile.name, x=10, y=None, w=190)  # co v·ªÅ ƒë√∫ng k√≠ch th∆∞·ªõc hi·ªÉn th·ªã

        pdf.ln(15)


        # C·∫≠p nh·∫≠t margin v√† xu·∫•t bi·ªÉu ƒë·ªì tr√≤n s·∫Øc n√©t
        fig_pie1.update_layout(margin=dict(t=60, b=40, l=40, r=40))
        fig_pie2.update_layout(margin=dict(t=60, b=40, l=40, r=40))

        with tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp1, \
            tempfile.NamedTemporaryFile(suffix=".png", delete=False) as tmp2:

            fig_pie1.write_image(tmp1.name, width=500, height=500, scale=2)
            fig_pie2.write_image(tmp2.name, width=500, height=500, scale=2)

            y_start = pdf.get_y()
            pdf.image(tmp1.name, x=15, y=y_start, w=85)
            pdf.image(tmp2.name, x=110, y=y_start, w=85)

        pdf.ln(100)

        # Thi·∫øt l·∫≠p font v√† ti√™u ƒë·ªÅ
        pdf.set_font("DejaVu", "B", 13)
        pdf.cell(0, 12, "üìä Ph√¢n b·ªë h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm KC", ln=True, align="C")
        pdf.ln(5)

        # T·∫°o bi·ªÉu ƒë·ªì s·∫Øc n√©t h∆°n
        if 'fig_bar' in locals():  # n·∫øu b·∫°n v·∫´n c√≤n figure trong b·ªô nh·ªõ
            path_bar_chart = tempfile.NamedTemporaryFile(suffix=".png", delete=False).name
            fig_bar.update_layout(margin=dict(t=80, b=60, l=60, r=40))
            fig_bar.write_image(path_bar_chart, width=1000, height=500, scale=3)

        # Ch√®n v√†o PDF
        if 'path_bar_chart' in locals():
            pdf.image(path_bar_chart, x=10, w=190)
            pdf.ln(10)




        # B·∫£ng
        pdf.set_font("DejaVu", "B", 14)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 14, "B·∫£ng th·ªëng k√™ s·ªë l∆∞·ª£ng h·ªçc sinh theo kho·∫£ng ƒëi·ªÉm:", ln=True, align="C")
        pdf.ln(6)

        col_widths = [65, 60, 60]
        headers = ["Kho·∫£ng ƒëi·ªÉm", f"{mon_chon} l·ªõp 9", f"{mon_chon} KC"]

        # Header b·∫£ng v·ªõi n·ªÅn m√†u xanh nh·∫°t v√† ch·ªØ ƒë·∫≠m tr·∫Øng
        pdf.set_fill_color(70, 130, 180)  # xanh d∆∞∆°ng ƒë·∫≠m
        pdf.set_text_color(255, 255, 255)  # tr·∫Øng
        pdf.set_font("DejaVu", "B", 12)
        for i in range(len(headers)):
            pdf.cell(col_widths[i], 14, headers[i], border=1, align='C', fill=True)
        pdf.ln()

        # N·ªôi dung b·∫£ng v·ªõi m√†u xen k·∫Ω
        pdf.set_font("DejaVu", "", 12)
        pdf.set_text_color(0, 0, 0)
        for i in range(len(bang_thong_ke)):
            row = bang_thong_ke.iloc[i]
            fill = i % 2 == 0
            if fill:
                pdf.set_fill_color(235, 245, 255)  # xanh r·∫•t nh·∫°t
            else:
                pdf.set_fill_color(255, 255, 255)  # tr·∫Øng
            
            pdf.cell(col_widths[0], 14, str(row['Kho·∫£ng ƒëi·ªÉm']), border=1, align='C', fill=fill)
            pdf.cell(col_widths[1], 14, str(row[f"{mon_chon} l·ªõp 9"]), border=1, align='C', fill=fill)
            pdf.cell(col_widths[2], 14, str(row[f"{mon_chon} KC"]), border=1, align='C', fill=fill)
            pdf.ln()


        # Xu·∫•t PDF
        with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_pdf:
            pdf.output(tmp_pdf.name)
            with open(tmp_pdf.name, "rb") as f:
                b64 = base64.b64encode(f.read()).decode()
                # HTML cho n√∫t t·∫£i PDF
                href = f"""
                <div >
                    <a href="data:application/pdf;base64,{b64}" download="bao_cao_phan_tich.pdf"
                        style="
                            display: inline-block;
                            padding: 12px 24px;
                            font-size: 16px;
                            font-weight: 600;
                            color: white;
                            background: linear-gradient(90deg, #007bff 0%, #0056b3 100%);
                            border: none;
                            border-radius: 8px;
                            text-decoration: none;
                            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);
                            transition: all 0.3s ease;
                        "
                        onmouseover="this.style.background='linear-gradient(90deg, #0056b3 0%, #003f7f 100%)'"
                        onmouseout="this.style.background='linear-gradient(90deg, #007bff 0%, #0056b3 100%)'"
                    >
                        üìÑ T·∫£i v·ªÅ b√°o c√°o PDF
                    </a>
                </div>
                """
                st.markdown(href, unsafe_allow_html=True)

    # ==== 1. Danh s√°ch t·ª´ kh√≥a v√† c√¢u tr·∫£ l·ªùi m·∫´u ====
    RESPONSE_TEMPLATES = [
        {
            "keywords": ["t·∫£i b√°o c√°o", "pdf", "xu·∫•t pdf"],
            "response": "üìÑ ƒê·ªÉ t·∫£i b√°o c√°o ph√¢n t√≠ch d∆∞·ªõi d·∫°ng PDF:\n1. Cu·ªôn xu·ªëng cu·ªëi trang.\n2. Nh·∫•n **üì• T·∫£i b√°o c√°o PDF**.\nH·ªá th·ªëng s·∫Ω t·∫°o file g·ªìm bi·ªÉu ƒë·ªì, th·ªëng k√™ v√† b·∫£ng d·ªØ li·ªáu chi ti·∫øt theo l·ª±a ch·ªçn c·ªßa b·∫°n."
        },
        {
            "keywords": ["ƒëi·ªÉm trung b√¨nh", "trung b√¨nh l·ªõp 9", "trung b√¨nh kc"],
            "response": "üìä ƒêi·ªÉm trung b√¨nh c·ªßa m√¥n h·ªçc ƒë∆∞·ª£c t√≠nh t·ª± ƒë·ªông sau khi b·∫°n ch·ªçn m√¥n. H·ªá th·ªëng s·∫Ω hi·ªÉn th·ªã bi·ªÉu ƒë·ªì c·ªôt ƒë·ªÉ b·∫°n so s√°nh gi·ªØa ƒëi·ªÉm l·ªõp 9 v√† ƒëi·ªÉm thi KC."
        },
        {
            "keywords": ["kho·∫£ng ƒëi·ªÉm", "ph√¢n t√≠ch kho·∫£ng ƒëi·ªÉm", "th·ªëng k√™ ƒëi·ªÉm"],
            "response": "üéØ Ph√¢n t√≠ch kho·∫£ng ƒëi·ªÉm gi√∫p b·∫°n bi·∫øt s·ªë l∆∞·ª£ng h·ªçc sinh thu·ªôc c√°c nh√≥m ƒëi·ªÉm c·ª• th·ªÉ. H·ªá th·ªëng hi·ªÉn th·ªã bi·ªÉu ƒë·ªì tr√≤n v√† b·∫£ng th·ªëng k√™ t∆∞∆°ng ·ª©ng."
        },
        {
            "keywords": ["l·ªçc", "b·ªô l·ªçc", "l·ªçc d·ªØ li·ªáu"],
            "response": "üîç B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng b·ªô l·ªçc ·ªü **thanh b√™n tr√°i** ƒë·ªÉ ph√¢n t√≠ch theo:\n- Tr∆∞·ªùng\n- L·ªõp\n- Gi·ªõi t√≠nh\n- D√¢n t·ªôc\n- Kho·∫£ng ƒëi·ªÉm"
        },
        {
            "keywords": ["gi·ªõi t√≠nh", "nam n·ªØ"],
            "response": "‚ößÔ∏è B·∫°n c√≥ th·ªÉ l·ªçc theo **gi·ªõi t√≠nh** ƒë·ªÉ so s√°nh ƒëi·ªÉm s·ªë gi·ªØa nam v√† n·ªØ h·ªçc sinh."
        },
        {
            "keywords": ["d√¢n t·ªôc"],
            "response": "üß¨ B·ªô l·ªçc **d√¢n t·ªôc** gi√∫p ph√¢n t√≠ch ri√™ng nh√≥m h·ªçc sinh d√¢n t·ªôc thi·ªÉu s·ªë n·∫øu c√≥."
        },
        {
            "keywords": ["b·∫Øt ƒë·∫ßu", "h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", "s·ª≠ d·ª•ng h·ªá th·ªëng"],
            "response": "üöÄ H∆∞·ªõng d·∫´n nhanh:\n1. T·∫£i file Excel c√≥ ƒëi·ªÉm thi.\n2. Ch·ªçn b·ªô l·ªçc b√™n tr√°i.\n3. Ch·ªçn m√¥n c·∫ßn ph√¢n t√≠ch.\n4. Xem bi·ªÉu ƒë·ªì, b·∫£ng th·ªëng k√™.\n5. Nh·∫•n n√∫t **T·∫£i b√°o c√°o PDF** n·∫øu mu·ªën xu·∫•t k·∫øt qu·∫£."
        },
        {
            "keywords": ["file", "nh·∫≠p d·ªØ li·ªáu", "excel", "ƒë·ªãnh d·∫°ng file"],
            "response": "üìÅ B·∫°n c·∫ßn t·∫£i l√™n file `.xlsx` ho·∫∑c `.xls` c√≥ c√°c c·ªôt: `TRUONG`, `LOP`, `GT`, `DT`, `To√°n(l·ªõp 9)`, `To√°n(KC)` ho·∫∑c t∆∞∆°ng ƒë∆∞∆°ng."
        },
        {
            "keywords": ["m√¥n h·ªçc", "to√°n", "ng·ªØ vƒÉn"],
            "response": "üìö H·ªá th·ªëng h·ªó tr·ª£ ph√¢n t√≠ch m√¥n **To√°n** v√† **Ng·ªØ vƒÉn**. B·∫°n c√≥ th·ªÉ ch·ªçn m√¥n t·ª´ thanh b√™n tr√°i."
        },
        {
            "keywords": ["l·ªói", "b·ªã l·ªói", "kh√¥ng ch·∫°y", "kh√¥ng ph√¢n t√≠ch"],
            "response": "‚ö†Ô∏è N·∫øu g·∫∑p l·ªói:\n- Ki·ªÉm tra l·∫°i file c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng.\n- ƒê·∫£m b·∫£o t√™n c√°c c·ªôt ƒë√∫ng nh∆∞ y√™u c·∫ßu.\n- N·∫øu v·∫´n l·ªói, b·∫°n c√≥ th·ªÉ th·ª≠ file kh√°c ho·∫∑c li√™n h·ªá h·ªó tr·ª£."
        }
    ]

    # ==== 2. H√†m ph·∫£n h·ªìi chatbot ====
    def guide_bot_reply(user_input: str) -> str:
        user_input = user_input.lower()
        for template in RESPONSE_TEMPLATES:
            if any(keyword in user_input for keyword in template["keywords"]):
                return template["response"]
        return (
            "ü§ñ Xin l·ªói, t√¥i ch∆∞a hi·ªÉu r√µ c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi:\n"
            "- L√†m sao ƒë·ªÉ t·∫£i b√°o c√°o?\n"
            "- Ph√¢n t√≠ch ƒëi·ªÉm trung b√¨nh th·∫ø n√†o?\n"
            "- C√°ch l·ªçc d·ªØ li·ªáu theo l·ªõp ho·∫∑c tr∆∞·ªùng?\n"
            "Ho·∫∑c nh·∫•n v√†o n√∫t g·ª£i √Ω b√™n d∆∞·ªõi nh√©!"
        )

    # ==== 3. Hi·ªÉn th·ªã ChatBot H∆∞·ªõng d·∫´n ====
    st.subheader("üí¨ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng")

    if "messages" not in st.session_state:
        st.session_state.messages = [
            {
                "role": "assistant",
                "content": "üëã Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ph√¢n t√≠ch ƒëi·ªÉm thi. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ c√°ch nh·∫≠p d·ªØ li·ªáu, ph√¢n t√≠ch ƒëi·ªÉm, xu·∫•t PDF ho·∫∑c c√°ch d√πng b·ªô l·ªçc nh√©!"
            }
        ]

    for i, msg in enumerate(st.session_state.messages):
        message(msg["content"], is_user=(msg["role"] == "user"), key=f"msg_{i}")

    # ==== 4. √î nh·∫≠p t·ª´ ng∆∞·ªùi d√πng ====
    if prompt := st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c t·ª´ kh√≥a c·∫ßn h·ªó tr·ª£..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        reply = guide_bot_reply(prompt)
        st.session_state.messages.append({"role": "assistant", "content": reply})
        st.rerun()

    # ==== 5. G·ª£i √Ω c√¢u h·ªèi nhanh ====
    st.markdown("### üí° G·ª£i √Ω m·ªôt s·ªë c√¢u h·ªèi:")
    cols = st.columns(2)
    questions = [
        "üìÑ L√†m sao ƒë·ªÉ xu·∫•t b√°o c√°o PDF?",
        "üìä Ph√¢n t√≠ch ƒëi·ªÉm trung b√¨nh",
        "üîç C√°ch l·ªçc d·ªØ li·ªáu theo l·ªõp",
        "üéØ Ph√¢n t√≠ch kho·∫£ng ƒëi·ªÉm",
        "üóÇ File c·∫ßn ƒë·ªãnh d·∫°ng th·∫ø n√†o?",
        "‚ö†Ô∏è G·∫∑p l·ªói khi ph√¢n t√≠ch"
    ]
    for i, q in enumerate(questions):
        with cols[i % 2]:
            if st.button(q):
                st.session_state.messages.append({"role": "user", "content": q})
                st.session_state.messages.append({"role": "assistant", "content": guide_bot_reply(q)})
                st.rerun()
